{{ $ImplementationName := nameify .InterfaceInfo.Name }}
{{ $fqInterfaceName := print .PackageInfo.Name "." .InterfaceInfo.Name }}
// Code generated by Go-Fidl-Generator. DO NOT EDIT.

import (
	"context"
	"github.com/godbus/dbus/v5"
)

func New{{exportNameOf $ImplementationName}}Client(dest, path string) (*{{$ImplementationName}}, error) {

    conn, err := dbus.ConnectSessionBus()
    if err != nil {
        return nil, err
    }

    broadcastMatchOptions := []dbus.MatchOption{
        dbus.WithMatchObjectPath(dbus.ObjectPath(path)),
        dbus.WithMatchInterface("{{$fqInterfaceName}}"),
    }

    return &{{$ImplementationName}}{
        dbusConnection: conn,
        destination: dest,
        path: path,
        broadcastMatchOptions: broadcastMatchOptions,
    },nil
}

type {{$ImplementationName}} struct {
    dbusConnection          *dbus.Conn
    destination             string
    path                    string
    broadcastMatchOptions   []dbus.MatchOption
}

func (impl *{{$ImplementationName}}) Close() error {
    return impl.dbusConnection.Close()
}

{{range .Methods}}

    func (impl *{{$ImplementationName}}) {{exportNameOf .Name}} {{"(ctx context.Context, " -}}
    {{- $paramCountIn := len .In}}
    {{- $paramCountOut := len .Out}}

    {{- range $idx, $param := .In -}}
        {{nameify $param.Name}} {{goType $param.Type}} {{if $idx = $paramCountIn}},{{end -}}
    {{- end}} {{") (" -}}
    {{- range $idx, $param := .Out -}}
        {{goType $param.Type}} {{if $idx = $paramCountOut}},{{end -}}
    {{end -}} error) {

        {{range $idx, $param := .Out -}}
            var {{goType $param.Name}} {{goType $param.Type}}
        {{end}}

    	err := impl.dbusConnection.Object(impl.destination, dbus.ObjectPath(impl.path)).
    		CallWithContext(ctx, "{{$fqInterfaceName}}.{{.Name}}{{"\"" -}}
    		, 0
    		{{- range $idx, $param := .In -}}
                , {{nameify $param.Name -}}
            {{- end}}).
    		Store(
    		{{- range $idx, $param := .Out -}}
              &{{goType $param.Name}}  {{if $idx = $paramCountOut}},{{end -}}
            {{end -}}
    		)

    	if err != nil {
    		return {{ range $idx, $param := .Out -}}
                      {{goType $param.Name}}  {{if $idx = $paramCountOut}},{{end -}}
                   {{end -}} err
    	}

        return {{ range $idx, $param := .Out -}}
             {{goType $param.Name}}  {{if $idx = $paramCountOut}},{{end -}}
       {{end -}}
       nil
    }
{{end}}

{{range .Broadcasts}}
	func (impl *{{$ImplementationName}}) ListenFor{{exportNameOf .Name}} {{"(ctx context.Context " -}}) (chan *dbus.Signal, func(), error) {

        err := impl.dbusConnection.AddMatchSignal(impl.broadcastMatchOptions...)
        if err != nil {
            return nil, nil, err
        }

        signalsChannel := make(chan *dbus.Signal)
        impl.dbusConnection.Signal(signalsChannel)

        var b interface{}
        err = impl.dbusConnection.Object(impl.destination, dbus.ObjectPath(impl.path)).
            CallWithContext(ctx, "{{$fqInterfaceName}}.subscribeFor{{.Name}}Selective", 0).
            Store(&b)
        if err != nil {
            return nil, nil, err
        }

        returnChan := make(chan *dbus.Signal)
        go func() {
            for {
                sig := <-signalsChannel
                if strings.Contains(sig.Name, "{{.Name}}") {
                    returnChan <- sig
                }
            }
        }()

        return returnChan, func() {
            impl.dbusConnection.RemoveSignal(signalsChannel)
        },nil

	}
{{end}}